# updater_stub/updater_stub.py
import argparse, os, sys, time, zipfile, shutil, subprocess
import zipfile
import subprocess
def wait_file_unlocked(path: str, timeout=30):
    start = time.time()
    while time.time() - start < timeout:
        try:
            if os.path.exists(path):
                with open(path, "ab"):
                    pass
            return True
        except Exception:
            time.sleep(0.5)
    return False

def extract_overwrite(zip_path: str, target_dir: str):
    with zipfile.ZipFile(zip_path, 'r') as z:
        for m in z.infolist():
            # T·∫°o th∆∞ m·ª•c n·∫øu c·∫ßn
            extract_path = os.path.join(target_dir, m.filename)
            if m.is_dir():
                os.makedirs(extract_path, exist_ok=True)
                continue
            os.makedirs(os.path.dirname(extract_path), exist_ok=True)
            # Ghi ƒë√®
            with z.open(m, 'r') as src, open(extract_path, 'wb') as dst:
                shutil.copyfileobj(src, dst)

def main():
   
    # python update_tool.py --app "C:\MyApp\main.exe" --zip "update.zip" --dir "C:\MyApp" --restart

    p = argparse.ArgumentParser()
    p.add_argument("--app", required=True, help="ƒë∆∞·ªùng d·∫´n exe ch√≠nh")
    p.add_argument("--zip", required=True, help="g√≥i c·∫≠p nh·∫≠t zip")
    p.add_argument("--dir", required=True, help="th∆∞ m·ª•c app")
    p.add_argument("--restart", action="store_true")
    args = p.parse_args()

    app_exe =  args.app # os.path.abspath(args.app)
    
    app_dir = args.dir # os.path.abspath(args.dir)
    zip_path = args.zip # os.path.abspath(args.zip)
    app_name = os.path.basename(args.app)
    zip_password = "1234x56"
    if not os.path.isfile(args.zip):
        print("‚ùå Kh√¥ng t√¨m th·∫•y file zip.")
        exit(1) 
    # In ra gi√° tr·ªã
    print(f"üìå File exe ch√≠nh: {app_exe}")
    print(f"üìå G√≥i c·∫≠p nh·∫≠t: {zip_path}")
    print(f"üìå Th∆∞ m·ª•c app: {app_dir}")
    print(f"üìå Restart sau khi c·∫≠p nh·∫≠t: {args.restart}")
    # B∆∞·ªõc 1: T·∫Øt app n·∫øu ƒëang ch·∫°y

    os.system(f'taskkill /f /im "{app_name}" >nul 2>&1')
    # B∆∞·ªõc 2: ƒê·ª£i app tho√°t v√† file ƒë∆∞·ª£c unlock
    wait_file_unlocked(app_exe, timeout=60)
    # B∆∞·ªõc 2: Gi·∫£i n√©n file zip v√†o th∆∞ m·ª•c app
    if not os.path.exists(args.zip):
        print("‚ùå Kh√¥ng t√¨m th·∫•y file zip.")
        exit(1)

    try:
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            if zip_password:
                zip_ref.extractall(args.dir, pwd=zip_password.encode('utf-8'))
            else:
                zip_ref.extractall(args.dir)
        # X√≥a file zip
        print("‚úÖ ƒê√£ gi·∫£i n√©n g√≥i c·∫≠p nh·∫≠t.")
    
    except RuntimeError:
        print("‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng ho·∫∑c file zip b·ªã l·ªói.")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi gi·∫£i n√©n: {e}")
    os.remove(zip_path)
    print(f"üóëÔ∏è ƒê√£ x√≥a file c·∫≠p nh·∫≠t: {args.zip}")
    # # 4) Kh·ªüi ch·∫°y l·∫°i app
    if args.restart:
        creationflags = 0x00000008 if sys.platform.startswith("win") else 0  # DETACHED_PROCESS
        subprocess.Popen([app_exe], close_fds=True, creationflags=creationflags)

if __name__ == "__main__":
    main()
# pyinstaller --onefile --name update_tool update_tool.py
 # python update_tool.py --app "C:\Users\HT\Desktop\New_folder\DownloadVID.exe" --zip "C:\Users\HT\Desktop\New_folder\MyApp-v1.3.0.zip" --dir "C:\Users\HT\Desktop\New_folder" --restart
# update_tool.exe --app "C:\Users\HT\Desktop\New_folder\DownloadVID.exe" --zip "C:\Users\HT\Desktop\New_folder\MyApp-v1.3.0.zip" --dir "C:\Users\HT\Desktop\New_folder" --restart
